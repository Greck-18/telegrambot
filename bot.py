import asyncio
import logging
import aioschedule

from config import TOKEN

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types.message import ContentType
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove, ParseMode
from news import NewsBy, FootBallNews
from sqlighter import SQLighter
from states import Test
from weather import Weather

logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
news_by = NewsBy()
football_news = FootBallNews()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
football_news.get_data()
football_news.process_data()
news_by.get_data()
news_by.process_data()
# —Å–æ–∑–¥–∞–Ω–∏–µ –±–¥
db = SQLighter('database.bd')
db.create_db()

# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
news_btn1 = InlineKeyboardButton('1', callback_data='btn1')
news_btn2 = InlineKeyboardButton('2', callback_data='btn2')
news_btn3 = InlineKeyboardButton('3', callback_data='btn3')
news_btn4 = InlineKeyboardButton('4', callback_data='btn4')
news_btn5 = InlineKeyboardButton('5', callback_data='btn5')
news_btn6 = InlineKeyboardButton('6', callback_data='btn6')
news_keyboard = InlineKeyboardMarkup().add(news_btn1, news_btn2, news_btn3, news_btn4, news_btn5, news_btn6)

# –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø—Ä–æ —Ñ—É—Ç–±–æ–ª
sport_btn1 = InlineKeyboardButton('üá´üá∑', callback_data='sport1')
sport_btn2 = InlineKeyboardButton('üá©üá™', callback_data='sport2')
sport_btn3 = InlineKeyboardButton('üáµüáπ', callback_data='sport3')
sport_btn4 = InlineKeyboardButton('üá≥üá±', callback_data='sport4')
sport_btn5 = InlineKeyboardButton('üáßüá™', callback_data='sport5')
sport_btn6 = InlineKeyboardButton('üá¶üáπ', callback_data='sport6')
sport_btn7 = InlineKeyboardButton('üè¥Û†ÅßÛ†Å¢Û†Å≥Û†Å£Û†Å¥Û†Åø', callback_data='sport7')
sport_btn8 = InlineKeyboardButton('üá∫üá¶', callback_data='sport8')
sport_btn9 = InlineKeyboardButton('üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø', callback_data='sport9')
sport_btn10 = InlineKeyboardButton('üá™üá∏', callback_data='sport10')
sport_btn11 = InlineKeyboardButton('üá∑üá∫', callback_data='sport11')
sport_btn12 = InlineKeyboardButton('üáÆüáπ', callback_data='sport12')
sport_keyboard = InlineKeyboardMarkup().add(sport_btn1, sport_btn2, sport_btn3, sport_btn4, sport_btn5, sport_btn6,
                                            sport_btn7,
                                            sport_btn8, sport_btn9, sport_btn10, sport_btn11, sport_btn12)


# –∫–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤—ã–≤–æ–¥–æ–º –Ω–∞ —ç–∫—Ä–∞–Ω —Ç–µ–∫—Å—Ç–∞
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('btn'))
async def news_process(callback_query: types.CallbackQuery, state=None):
    num = callback_query.data[-1]
    if num.isdigit():
        num = int(num)
    count = num
    if num == 1:
        await bot.send_message(callback_query.from_user.id, news_by.get_news(count), parse_mode="html")
    elif num == 2:
        await bot.send_message(callback_query.from_user.id, news_by.get_news(count), parse_mode="html")
    elif num == 3:
        await bot.send_message(callback_query.from_user.id, news_by.get_news(count), parse_mode="html")
    elif num == 4:
        await bot.send_message(callback_query.from_user.id, news_by.get_news(count), parse_mode="html")
    elif num == 5:
        await bot.send_message(callback_query.from_user.id, news_by.get_news(count), parse_mode="html")
    elif num == 6:
        await bot.send_message(callback_query.from_user.id, news_by.get_news(count), parse_mode="html")
    await asyncio.sleep(2)
    repeat_btn = KeyboardButton("–î–∞", callback_data="Yes")
    repeat_btn2 = KeyboardButton('–ù–µ—Ç', callback_data="No")
    repeat_keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(repeat_btn, repeat_btn2)
    await bot.send_message(callback_query.from_user.id, "–•–æ—Ç–∏—Ç–µ –µ—â—ë –ø–æ—á–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?", reply_markup=repeat_keyboard)
    await Test.Q2.set()


# —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def bot_start(message: types.Message):
    text = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è ,\n–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–µ–Ω—è –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω , –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /subscribe'
    await bot.send_message(message.from_user.id, text)


# –º–µ–Ω—é –±–æ—Ç–∞
@dp.message_handler(commands=['help'])
async def bot_help(message: types.Message):
    await bot.send_message(message.chat.id, f"–ü–æ–º–æ—â—å, —Ç–≤–æ–π id {message.from_user.id}")


# –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞
@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
    if not db.subscribers_exists(message.from_user.id):
        db.add_subscriber(message.from_user.id)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ <b>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å</b>!", parse_mode="html")
    elif db.check_status(message.chat.id) == 0:
        db.update_subscriber(message.from_user.id, True)
        await message.answer("–í—ã –æ–ø—è—Ç—å <b>–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å</b>!", parse_mode="html")
    else:
        db.update_subscriber(message.from_user.id, True)
        await message.answer("–í—ã —É–∂–µ –∏ —Ç–∞–∫ <b>–ø–æ–¥–ø–∏—Å–∞–Ω—ã</b>!", parse_mode="html")


# –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –±–æ—Ç–∞
@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):
    if not db.subscribers_exists(message.from_user.id):
        await message.answer("–í—ã –∏ —Ç–∞–∫ –Ω–µ <b>–ø–æ–¥–ø–∏—Å–∞–Ω—ã</b>!", parse_mode="html")
    elif db.check_status(message.chat.id) == 0:
        await message.answer("–í—ã —É–∂–µ –∏—Ç–∞–∫ <b>–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å</b>", parse_mode="html")
    else:
        db.update_subscriber(message.from_user.id, False)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ <b>–æ—Ç–ø–∏—Å–∞–ª–∏—Å—å</b>!", parse_mode='html')


# –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã
@dp.message_handler(Command("weather"), state=None)
async def give_weather(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç—Ä–æ–º —Ö–æ—Ç–∏—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É: ")
    """–ö–∞–∫–æ–π-—Ç–æ –∫–æ–¥"""
    await Test.Q1.set()


# –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
@dp.message_handler(state=Test.Q1)
async def answer_weather(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data({"answer1": answer})
    data = await state.get_data()
    city = data.get("answer1")
    weather = Weather(city)
    await message.answer(weather.get_weather(), parse_mode="html")
    await state.finish()


# —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–±–µ–ª–æ—Ä—É—Å—Å–∫–∏—Ö)
@dp.message_handler(commands=["news"], state=None)
async def bel_news(message: types.Message):
    await message.answer(news_by.get_title())
    await asyncio.sleep(2)
    await message.answer("–ö–∞–∫—É—é <strong>–Ω–æ–≤–æ—Å—Ç—å</strong> —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ?", reply_markup=news_keyboard,
                         parse_mode='html')


# –º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–≥–æ–¥—ã
@dp.message_handler(state=Test.Q2)
async def answer_weather(message: types.Message, state: FSMContext):
    answer1 = message.text
    await state.update_data({"answer2": answer1})
    data = await state.get_data()
    repeat = data.get("answer2")
    if repeat.lower() in "–¥–∞":
        await bel_news(message)
    elif repeat.lower() in '–Ω–µ—Ç':
        await bot_help(message)
    else:
        await unknown_message(message)
    await state.finish()


@dp.message_handler(commands=['football'], state=None)
async def sport_news(message: types.Message):
    await bot.send_message(message.chat.id,
                           "–ó–¥–µ—Å—å –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –º–∏—Ä–æ–≤–æ–π —Ñ—É—Ç–±–æ–ª , –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ª–∏–≥—É, –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å",
                           reply_markup=sport_keyboard)
    await message.answer(football_news.get_news(12))


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@dp.message_handler(content_types=ContentType.ANY)
async def unknown_message(message: types.Message):
    text = "–Ø –Ω–µ –∑–Ω–∞—é , —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã , –Ω–æ –∑–∞—Ç–æ —è –∑–Ω–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É /help !)"
    await message.reply(text, parse_mode=ParseMode.MARKDOWN)


# —Ñ—É–Ω–∫—Ü–∏—è , –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –∞–¥–º–∏–Ω—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def clock_for_admin():
    text = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ ,<strong> –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω</strong> . –ñ–µ–ª–∞—é –≤–∞–º —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!"
    await bot.send_message(800847160, text, parse_mode='html')
    await asyncio.sleep(1)
    text = "<strong>–ü–æ–≥–æ–¥–∞:</strong>\n"
    weather = Weather("–ú–∏–Ω—Å–∫")
    await bot.send_message(800847160, text + weather.get_weather(), parse_mode='html')


# –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏—é –∞–¥–º–∏–Ω–∞
async def scheduled():
    aioschedule.every().day.at("09:30").do(clock_for_admin)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


# –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é –∞–¥–º–∏–Ω–∞
async def on_startup(x):
    asyncio.create_task(scheduled())


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
